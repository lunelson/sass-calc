//                                    _
//                                   | |
//  ___  __ _ ___ ___ ______ ___ __ _| | ___
// / __|/ _` / __/ __|______/ __/ _` | |/ __|
// \__ \ (_| \__ \__ \     | (_| (_| | | (__
// |___/\__,_|___/___/      \___\__,_|_|\___|

////////////
// CHECKS //
////////////

@function num-check($a, $b){
  @return (type-of($a) == 'number' and type-of($b) == 'number');
}

@function add-check($a, $b){
  @if num-check($a, $b) {
    @return unit($a) == unit($b) or (unitless($a) or unitless($b));
  }
  @return false;
}

@function mul-check($a, $b){
  @if num-check($a, $b) {
    @return unitless($a) or unitless($b);
  }
  @return false;
}

@function div-check($a, $b){
  @if num-check($a, $b) {
    @return unitless($b);
  }
  @return false;
}

@function unitless-number($n) {
  @return if(type-of($n) == 'number', unitless($n), false);
}

///////////
// UTILS //
///////////

@function str-last-index($str, $substr) {
  $length: str-length($str);
  @for $n from $length - str-length($substr) through 1 {
    $index: str-index(str-slice($str, $n + 1, $length), $substr);
    @if $index { @return $index + $n; }
  }
  @return null;
}

@function pre-calc($value){
  // @if not $value{
  //   @return 0%;
  // } @else if unitless-number($value) {
  @if unitless-number($value) {
    @return $value * 1em;
  } @else if type-of($value) == 'string' {
    $is-calc: str-index($value, 'calc') == 1;
    $start: str-index($value, '(');
    $end: str-last-index($value, ')');
    @if $is-calc and $start and $end {
      @return unquote(str-slice($value, $start, $end));
    } @else {
      @return unquote('(#{$value})');
    }
  } @else {
    // @return unquote('(#{$value})');
    @return $value;
  }
}

//////////
// MAIN //
//////////

@function add($calc1, $calc2){
  @if not $calc1 { @return $calc2; }
  @if not $calc2 { @return $calc1; }
  @if add-check($calc1, $calc2) { @return $calc1 + $calc2; }
  @return unquote('calc(#{pre-calc($calc1)} + #{pre-calc($calc2)})');
}

@function subtract($calc1, $calc2){
  @if not $calc1 { @return $calc2; }
  @if not $calc2 { @return $calc1; }
  @if add-check($calc1, $calc2) { @return $calc1 - $calc2; }
  @return unquote('calc(#{pre-calc($calc1)} - #{pre-calc($calc2)})');
}

@function multiply($calc, $n){
  @if not $n or type-of($n) != 'number' { @return $calc; }
  @if mul-check($calc, $n) { @return $calc * $n; }
  @return unquote('calc(#{pre-calc($calc)} * #{$n})');
}

@function divide($calc, $n){
  @if $n == 0 { @error 'divide: attempt to divide by zero'; }
  @if not $n or type-of($n) != 'number' { @return $calc; }
  @if div-check($calc, $n) { @return $calc / $n; }
  @return unquote('calc(#{pre-calc($calc)} / #{$n})');
}
