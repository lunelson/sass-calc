//                                    _
//                                   | |
//  ___  __ _ ___ ___ ______ ___ __ _| | ___
// / __|/ _` / __/ __|______/ __/ _` | |/ __|
// \__ \ (_| \__ \__ \     | (_| (_| | | (__
// |___/\__,_|___/___/      \___\__,_|_|\___|

//
// dependencies
//

@import 'node_modules/sass-u/index';

//
// checks
// --------------------------------------------------------------------------

@function __can-addition($a, $b){
  @if is-number($a, $b) {
    @return unit($a) == unit($b) or (unitless($a) or unitless($b));
  }
  @return false;
}

@function __can-multiply($a, $b){
  @if is-number($a, $b) { @return unitless($a) or unitless($b); }
  @return false;
}

@function __can-divide($a, $b){
  @if is-number($a, $b) { @return unitless($b); }
  @return false;
}

//
// utils
// --------------------------------------------------------------------------

@function __str-last-index($str, $substr) {
  @if not is-string($str, $substr) { @return error("non-string argument(s) supplied"); }
  $length: str-length($str);
  @for $n from $length - str-length($substr) through 1 {
    $index: str-index(str-slice($str, $n + 1, $length), $substr);
    @if $index { @return $index + $n; }
  }
  @return null;
}

@function __calc-format($value){
  @if type-of($value) == 'number' {
    @return if(unitless($value), $value * 1%, $value);
  } @else if type-of($value) == 'string' {
    $is-calc: str-index($value, 'calc') == 1;
    $start: str-index($value, '(');
    $end: __str-last-index($value, ')');
    @if $is-calc and $start and $end {
      @return unquote(str-slice($value, $start, $end));
    } @else {
      @return unquote('(#{$value})');
    }
  } @else {
    @return error("invalid value for calc expression");
  }
}

//
// main
// --------------------------------------------------------------------------

@function add($calc1, $calc2){
  @if is-zero($calc1, $calc2) { @return 0%; }
  @if not $calc1 or is-zero($calc1) { @return $calc2; }
  @if not $calc2 or is-zero($calc2) { @return $calc1; }
  @if __can-addition($calc1, $calc2) { @return $calc1 + $calc2; }
  @if is-number($calc2) { @if $calc2 < 0 { @return subtract($calc1, $calc2/-1); } }
  @return unquote('calc(#{__calc-format($calc1)} + #{__calc-format($calc2)})');
}

@function subtract($calc1, $calc2){
  @if is-zero($calc1, $calc2) { @return 0%; }
  @if not $calc1 or is-zero($calc1) { @return $calc2; }
  @if not $calc2 or is-zero($calc2) { @return $calc1; }
  @if __can-addition($calc1, $calc2) { @return $calc1 - $calc2; }
  @if is-number($calc2) { @if $calc2 < 0 { @return add($calc1, $calc2/-1); } }
  @return unquote('calc(#{__calc-format($calc1)} - #{__calc-format($calc2)})');
}

@function multiply($calc, $n){
  @if is-zero($calc) or is-zero($n) { @return 0%; }
  @if not $n or type-of($n) != 'number' { @return error("invalid factor"); }
  @if __can-multiply($calc, $n) { @return $calc * $n; }
  @return unquote('calc(#{__calc-format($calc)} * #{$n})');
}

@function divide($calc, $n){
  @if is-zero($calc) { @return 0%; }
  @if not $n or type-of($n) != 'number' or is-zero($n) { @return error("invalid divisor"); }
  @if __can-divide($calc, $n) { @return $calc / $n; }
  @return unquote('calc(#{__calc-format($calc)} / #{$n})');
}
