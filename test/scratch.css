.private {
  /*
    detect numbers:
      true
      false
      false
   */
  is-number: true;
  is-number: false;
  is-number: false;
  /*
    detect zero, unit or not:
      true
      false
   */
  is-zero: true;
  is-zero: false;
  /*
    verify zero operations:
  */
  zero: 0px;
  zero: 1px;
  zero: 0;
  num: list;
  /*
    __str-last-index
   */
  str-last-index: 12;
  str-last-index: 11;
  str-last-index: 13;
  str-last-index: 12;
  str-last-index: 15 15;
  /*
    __format
      unitless zero becomes 0%
      other unitless numbers left alone
  */
  format: 5%;
  format: 0%;
  format: 5em;
  format: error("invalid value for calc expression");
  format: (1em + 3%);
  format: 1em + 3%;
  format: (1em + 3%);
  format: (string);
  format: (string);
  format: (1em + 1vw);
}

.public {
  /**
   * add
   */
  content: calc(1.5em + 1rem);
  content: 0%;
  content: 1rem;
  content: -1em;
  content: calc(-1em - 2rem);
  /*
    subtract
    - non-number
    - negative number
    - unitless number
    - matched units
    - mixed units
    - unit zero
    - unitless zero
    =================
      calc(1.5em - error("invalid value for calc expression"))
      calc(1.5em - error("invalid value for calc expression"))
      0.5em
      calc(-1em + 2rem)
   */
  content: calc(1.5em - error("invalid value for calc expression"));
  content: 1.5em;
  content: 0.5em;
  content: calc(-1em + 2rem);
  /**
   * compound
   */
  content: calc(((100vw - 50%) * 2) + 10px);
  content: 0.25em;
  content: calc(0.25em - (1em + 1ex));
}
