@import 'deps';

//      _ _       _     _
//     | (_)     (_)   | |
//   __| |___   ___  __| | ___
//  / _` | \ \ / / |/ _` |/ _ \
// | (_| | |\ V /| | (_| |  __/
//  \__,_|_| \_/ |_|\__,_|\___|


$st-catch: true !global;

.divide {
  /*
  non-number
  ////////////////////////
  content: "bool is an invalid operand";
  content: "bool is an invalid operand";
  content: "bool is an invalid operand";
  content: "list is an invalid operand";
  content: "list is an invalid operand";
  */
  content: inspect(divide(1.5em, false) or last-error());
  content: inspect(divide(false, 1.5) or last-error());
  content: inspect(divide(false, 1.5em) or last-error());
  content: inspect(divide(1.5em, (1em 3)) or last-error());
  content: inspect(divide((foo bar), 1.5em) or last-error());
  /*
  string arguments
  ////////////////////////
  content: calc(1.5em / var(--foo));
  content: "1.5em is an invalid divisor";
  content: calc(var(--foo) / 2);
  content: calc(1.5em / calc(100% - 10px));
  content: "1.5em is an invalid divisor";
  content: calc((100% - 10px) / 2);
  */
  content: inspect(divide(1.5em, var(--foo)) or last-error());
  content: inspect(divide(var(--foo), 1.5em) or last-error());
  content: inspect(divide(var(--foo), 2) or last-error());
  content: inspect(divide(1.5em, calc(100% - 10px)) or last-error());
  content: inspect(divide(calc(100% - 10px), 1.5em) or last-error());
  content: inspect(divide(calc(100% - 10px), 2) or last-error());
  /*
  negative numbers
  ////////////////////////
  content: calc(var(--bar) / -2);
  content: -0.75em;
  content: -0.5em;
  content: calc(var(--bar) / 2);
  */
  content: inspect(divide(var(--bar), -2) or last-error());
  content: inspect(divide(1.5em, -2) or last-error());
  content: inspect(divide(-1em, 2) or last-error());
  content: inspect(divide(var(--bar), 2) or last-error());
  /*
  bad divisors
  ////////////////////////
  content: "0 is an invalid divisor";
  content: "list is an invalid operand";
  content: "null is an invalid divisor";
  */
  content: inspect(divide(2, 0) or last-error());
  content: inspect(divide(1.5em, (a b)) or last-error());
  content: inspect(divide(-1, null) or last-error());
  /*
  unit vs unitless zero
  ////////////////////////
  content: 0%;
  content: 0%;
  */
  content: inspect(divide(0px, 2) or last-error());
  content: inspect(divide(0, 2) or last-error());
}
