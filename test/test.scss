@import 'lib/test'; 
@import '../index';

@debug function(is-number);
@debug in(0px) + out(true);
@debug in(1px) + out(true);
@debug in(0) + out(true);
@debug in('str') + out(false);
@debug in((1 2)) + out(false);
@debug in(0px, 'str') + out(false);
@debug in(0px, 1px) + out(true);

@debug function(is-zero);
@debug in(0) + out(true);
@debug in(0px) + out(true);
@debug in(0rem) + out(true);
@debug in(0%) + out(true);
@debug in(1) + out(false);
@debug in(1%) + out(false);
@debug in(0, 0) + out(true);
@debug in(0, 1) + out(false);

@debug function(is-string);
@debug in(abc) + out(true);
@debug in('abc') + out(true);
@debug in("abc") + out(true);
@debug in('1') + out(true);
@debug in(1) + out(false);
@debug in(abc, 'def') + out(true);
@debug in(abc, 1) + out(false);
@debug in(('abc' 'def')) + out(false);

@debug function(strip-unit);
@debug in(1px) + out(1);
@debug in(3.5em) + out(3.5);
@debug in(0wv) + out(0);
@debug in(-1ex) + out(-1);

@debug function(list-slice);
@debug in(('a' 'b' 'c'), 3, 3) + out(l('c'));
@debug in(('a' 'b' 'c'), 1, 3) + out(('a' 'b' 'c'));
@debug in(('a' 'b' 'c'), 1, 2) + out(('a' 'b'));
@debug in((1 2px 3 'd' 5), 2, 4) + out((2px 3 'd'));
@debug in(('a' 'b' 3 'd' 5 6 'g'), 2, 5) + out(('b' 3 'd' 5));

@debug function(list-contains);
@debug in(('a' 'b' 'c'), 'a') + out(true);
@debug in(('a' 'b' 'c'), 'b') + out(true);
@debug in(('a' 'b' 'c'), 1) + out(false);
@debug in(('a' 2px ('a' 'b' 'c')), ('a' 'b' 'c')) + out(true);
@debug in(('a' 2px ('a' 'b' 'c')), 2px) + out(true);
@debug in('a' 2px ('a' 'b' 'c'), 'b') + out(false);

@debug function(list-last-index);
@debug in(('a' 'b' 'c'), 'a') + out(1);
@debug in(('a' 'b' 'c'), 'b') + out(2);
@debug in(('a' 'b' 'c'), 'c') + out(3);
@debug in(('a' '-' 2px '-' 'c'), '-') + out(4);

@debug function(list-split-at-last);
@debug in((3 '-' 1 '-' 2), '-') + out((3 '-' 1) 2 '-');
@debug in(('a' 'b' 'c'), 'c') + out(('a' 'b') null 'c');
@debug in(('a' 'b' 'c'), 'a') + out((null ('b' 'c') 'a'));

@debug function(add);
@debug in(1, 2) + out(3);
@debug in(1px, 2px) + out(3px);
@debug in(1px, 2) + out(3px);
@debug in(0em, 0rem) + out(0);
@debug in(0em, 1rem) + out(1rem);
@debug in(-1em, 0rem) + out(-1em);
@debug in(1em, 1vw) + out('calc(1em + 1vw)');
@debug in(1.5em, 1rem) + out('calc(1.5em + 1rem)');
@debug in(-1em, -2rem) + out('calc(-1em - 2rem)');

@debug function(subtract);
@debug in(1, 2) + out(-1);
@debug in(2, 1) + out(1);
@debug in(1px, 2px) + out(-1px);
@debug in(2px, 1px) + out(1px);
@debug in(1em, -1.5em) + out(2.5em);
@debug in(1em, 1vw) + out('calc(1em - 1vw)');
@debug in(-1em, -2rem) + out('calc(-1em + 2rem)');

@debug function(multiply);
@debug in(3, 2) + out(6);
@debug in(-3, 2) + out(-6);
@debug in(0, -7) + out(0);
@debug in(-2px, -3) + out(6px);
@debug in(1px, 2) + out(2px);
@debug in(-1.5px, 2em) + out('calc(-1.5px * 2em)');
@debug in(1px, 2px) + out('calc(1px * 2px)');

@debug function(divide);
@debug in(1, 2) + out(0.5);
@debug in(-1, 2) + out(-0.5);
@debug in(1, -2) + out(-0.5);
@debug in(-1, -2) + out(0.5);
@debug in(1, 0.5) + out(2);
@debug in(2, 2) + out(1);
@debug in(1px, 2) + out(0.5px);
@debug in(1px, -2) + out(-0.5px);
@debug in(0, 2) + out(0);
@debug in(6em, 2) + out(3em);

@debug assert('chained operations');
@debug in(divide(subtract(1.5em, 1em), 2)) + out(0.25em);
@debug in(subtract(0.25em, add(1em, 1ex))) + out('calc(-0.75em + -1ex)');
