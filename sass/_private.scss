//
// type/value checks
// --------------------------------------------------------------------------

@function __is-number($args...) {
  @each $arg in $args { @if type-of($arg) != 'number' { @return false; } }
  @return true;
}

@function __is-string($args...) {
  @each $arg in $args { @if type-of($arg) != 'string' { @return false; } }
  @return true;
}

@function __is-zero($args...) {
  @if not is-number($args...) { @return false; }
  @each $arg in $args { @if __strip($arg) != 0 { @return false; } }
  @return true;
}

//
// operability checks
// --------------------------------------------------------------------------

@function __can-sum($a, $b){
  @if __is-number($a, $b) { @return comparable($a, $b); }
  @return false;
}

@function __can-multiply($a, $b){
  @if __is-number($a, $b) { @return unitless($a) or unitless($b); }
  @return false;
}

@function __can-divide($a, $b){
  @if __is-number($a, $b) { @return unitless($b); }
  @return false;
}

//
// utils
// --------------------------------------------------------------------------

@function __str-last-index($str, $substr) {
  @if not __is-string($str, $substr) { @return error("non-string argument(s) supplied"); }
  $length: str-length($str);
  @for $n from $length - str-length($substr) through 1 {
    $index: str-index(str-slice($str, $n + 1, $length), $substr);
    @if $index { @return $index + $n; }
  }
  @return null;
}

@function __format($value){
  @if type-of($value) == 'number' {
    @return if(unitless($value), $value * 1%, $value);
  } @else if type-of($value) == 'string' {
    $is-calc: str-index($value, 'calc') == 1;
    $start: str-index($value, '(');
    $end: __str-last-index($value, ')');
    @if $is-calc and $start and $end {
      @return unquote(str-slice($value, $start, $end));
    } @else {
      @return unquote('(#{$value})');
    }
  } @else {
    @return error("invalid value for calc expression");
  }
}
