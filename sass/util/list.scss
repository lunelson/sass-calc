// List utilities

// Gets a sublist from a list
// @example ('a', 'b', 3, 'd', 5, 6, 'g'), 2, 5 —> ('b', 3, 'd', 5)
// @author Hugo Giraudel
// @param {List} $list — the list to slice
// @param {Number} $start — the index of the first item in the sublist
// @param {Number} $end — the index of the last item in the sublist
// @return {List} — the sublist from start to end
@function list-slice($list, $start: 1, $end: length($list)) {
  $result: null;

  @if not is-number($start, $end) { @warn "Either $start or $end are not a number for `slice`."; }
  @else if $start > $end { @warn "The start index has to be lesser than or equals to the end index for `slice`."; }
  @else if $start < 1 or $end < 1 { @warn "List indexes must be non-zero integers for `slice`."; }
  @else if $start > length($list) { @warn "List index is #{$start} but list is only #{length($list)} item long for `slice`."; }
  @else if $end > length($list) { @warn "List index is #{$end} but list is only #{length($list)} item long for `slice`."; }
  
  @else {
    $result: ();
                
    @for $i from $start through $end {
      $result: append($result, nth($list, $i));
    }
  }

  @return $result;
}


// Checks if a list contains an element
// @author Matthias Totschnig
@function list-contains($list, $element) {
  @each $item in $list { @if $item == $element { @return true; } }
  @return false;
}


// Find the index of the last occurence of an element in a list
// @author Matthias Totschnig
// @param {List} $list — The list to search
// @param {Any} $separator — The element to search for
// @return {Number} — The index of the last occurence of $separator in $list
@function list-last-index($list, $separator) {
  $length: length($list);
  @for $n from $length through 1 {
    $element: nth($list, $n);
    @if $element == $separator {
      @return $n;
    }
  }
  @return null;
}


// Returns the parts of a list before and after the last occurence of a given separator
// @example ('abc' '-' 'def' '-' 'ghi'), '-' —> ( ('abc' '-' 'def'), ('ghi') )
// @author Matthias Totschnig
// @param {List} $list — List to be splitted
// @param {Any} $separator — Element splitting the list
// @param {Any} $or-separator — Optionally, another possible element. The last occurence of any of the separators will be taken
// @return {List} — List of two lists from the start to the separator and from the separator to the end
//                  If an optional separator was provided, a third element, the chosen separator, will be appended to the list
@function list-split-at-last($list, $separator, $or-separator: null) {
  // index of last separator in list
  $index: list-last-index($list, $separator);
  $chosen-separator: $separator;

  @if $or-separator != null {
    $or-index: list-last-index($list, $or-separator);

    @if $or-index != null and ($index == null or $index < $or-index) {
      $index: $or-index;
      $chosen-separator: $or-separator;
    }
  }

  @if $index == null {
    @return false;
  }

  // get the subslist from the first element to the separator
  $a: list-slice($list, 1, $index - 1);
  // and from the separator to the end of the list
  $b: list-slice($list, $index + 1);

  @if length($a) == 1 {
    $a: nth($a, 1);
  }

  @if length($b) == 1 {
    $b: nth($b, 1);
  }

  // return a list of two lists
  @return ($a, $b, $chosen-separator);
}
